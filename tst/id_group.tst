#
gap> START_TEST("id_group.tst");;

#
gap> orders := [
>  [ 1, 2, 3, 5, 7, 11, 13, 17, 19, 23 ],
>  [ 4, 9, 25, 49, 121, 169, 289, 361, 529, 841 ],
>  [ 6, 10, 14, 15, 21, 22, 26, 33, 34, 35 ],
>  [ 8, 27, 125, 343, 1331, 2197, 4913, 6859, 12167, 24389 ],
>  [ 12, 20, 28, 44, 45, 52, 63, 68, 76, 92 ],
>  [ 18, 50, 75, 98, 147, 242, 245, 338, 363, 507 ],
>  [ 30, 42, 66, 70, 78, 102, 105, 110, 114, 130 ],
>  [ 64, 96, 128, 160, 192, 240, 288, 320, 336, 400 ],
>  [ 16, 24, 32, 36, 40, 48, 54, 56, 60, 72 ],
>  [ 256, 384, 576, 640, 864, 896, 960, 1296, 1344, 1440 ],
>  [ 768, 1016, 1048, 1072, 1088, 1096, 1112, 1136, 1168, 1184 ],
>  [ 1152, 1920 ], [  ], [  ], [  ], [  ],
>  [ 1029, 1053, 1107, 1161, 1215, 1250, 1269, 1375, 1377, 1431 ], [  ],
>  [ 14641, 28561, 83521 ], [  ], [  ], [  ], [  ],
>  [ 2002, 2010, 2030, 2046, 2090, 2130, 2145, 2170, 2190, 2210 ],
>  [ 2004, 2020, 2028, 2034, 2044, 2050, 2060, 2068, 2070, 2076 ] ];;
gap> numbers := [
> [ [ 1 ], [ 1 ], [ 1 ], [ 1 ], [ 1 ], [ 1 ], [ 1 ], [ 1 ], [ 1 ], [ 1 ] ],
>  [ [ 1, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ],
>      [ 1, 2 ], [ 1, 2 ], [ 1, 2 ] ],
>  [ [ 1, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1 ],
>      [ 1, 2 ], [ 1 ] ],
>  [ [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ],
>      [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ],
>      [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ],
>      [ 1, 2, 3, 4, 5 ] ],
>  [ [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4 ], [ 1, 2, 3, 4 ],
>      [ 1, 2 ], [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4 ], [ 1, 2, 3, 4, 5 ],
>      [ 1, 2, 3, 4 ], [ 1, 2, 3, 4 ] ],
>  [ [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 1, 2, 3 ], [ 1, 2, 3, 4, 5 ],
>      [ 1, 2, 3, 4, 5, 6 ], [ 1, 2, 3, 4, 5 ], [ 1, 2 ], [ 1, 2, 3, 4, 5 ],
>      [ 1, 2, 3 ], [ 1, 2, 3, 4, 5, 6 ] ],
>  [ [ 1, 2, 3, 4 ], [ 1, 2, 3, 4, 5, 6 ], [ 1, 2, 3, 4 ], [ 1, 2, 3, 4 ],
>      [ 1, 2, 3, 4, 5, 6 ], [ 1, 2, 3, 4 ], [ 1, 2 ], [ 1, 2, 3, 4, 5, 6 ],
>      [ 1, 2, 3, 4, 5, 6 ], [ 1, 2, 3, 4 ] ],
>  [ [ 1, 43, 59, 114, 134, 152, 162, 212, 220, 241, 267 ],
>      [ 1, 3, 17, 59, 96, 100, 116, 138, 219, 226, 231 ],
>      [ 1, 59, 151, 645, 932, 1165, 2114, 2201, 2212, 2287, 2328 ],
>      [ 1, 67, 78, 83, 120, 160, 171, 180, 184, 185, 238 ],
>      [ 1, 314, 466, 581, 689, 772, 1081, 1340, 1375, 1408, 1543 ],
>      [ 1, 17, 20, 48, 54, 91, 105, 119, 195, 204, 208 ],
>      [ 1, 87, 468, 523, 606, 668, 774, 856, 876, 923, 1045 ],
>      [ 1, 71, 213, 229, 353, 435, 637, 821, 1027, 1209, 1640 ],
>      [ 1, 26, 92, 114, 115, 143, 148, 150, 201, 210, 228 ],
>      [ 1, 42, 107, 111, 117, 131, 140, 162, 171, 181, 221 ] ],
>  [ [ 1, 2, 3, 5, 6, 7, 8, 11, 12, 13, 14 ],
>      [ 1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 15 ],
>      [ 1, 6, 8, 11, 12, 13, 23, 26, 35, 40, 51 ],
>      [ 1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14 ],
>      [ 1, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14 ],
>      [ 1, 2, 3, 10, 11, 13, 27, 33, 39, 40, 52 ],
>      [ 1, 2, 3, 5, 6, 8, 11, 12, 13, 14, 15 ],
>      [ 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13 ],
>      [ 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13 ],
>      [ 1, 3, 10, 14, 20, 26, 31, 36, 40, 48, 50 ] ],
>  [ [ 1, 20583, 25827, 26947, 28047, 32623, 35280, 40326, 41704, 53709, 56092
>         ],
>      [ 1, 637, 2102, 2812, 4536, 6271, 10085, 12091, 12573, 17392, 20169 ],
>      [ 1, 1202, 1393, 2295, 3402, 3678, 4341, 4745, 5705, 6057, 8681 ],
>      [ 1, 1739, 2070, 4358, 9947, 10771, 14128, 16570, 16922, 18425, 21541 ],
>      [ 1, 222, 453, 682, 1973, 2290, 2363, 2822, 4392, 4504, 4725 ],
>      [ 1, 4525, 6615, 8757, 9675, 10417, 10784, 14961, 17823, 18612, 19349 ],
>      [ 1, 397, 3281, 5698, 5935, 6156, 6998, 8780, 8872, 11018, 11394 ],
>      [ 1, 321, 564, 1259, 1617, 1805, 2185, 2338, 2360, 2895, 3609 ],
>      [ 1, 615, 3192, 3722, 5139, 5861, 7926, 9041, 9234, 9554, 11720 ],
>      [ 1, 217, 1292, 2012, 2634, 2980, 3974, 4012, 4207, 5461, 5958 ] ],
>  [ [ 1, 37991, 61490, 122726, 344146, 480038, 538763, 545118, 695162,
>          1072697, 1090235 ], [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12 ],
>      [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12 ],
>      [ 1, 3, 5, 12, 14, 22, 26, 31, 33, 35, 42 ],
>      [ 1, 498, 521, 540, 745, 841, 1023, 1112, 1246, 1551, 1681 ],
>      [ 1, 2, 3, 4, 6, 8, 11, 12, 13, 14, 15 ],
>      [ 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12 ],
>      [ 1, 8, 20, 22, 24, 29, 30, 36, 38, 39, 42 ],
>      [ 1, 5, 6, 7, 9, 15, 27, 40, 41, 51, 53 ],
>      [ 1, 49, 51, 107, 115, 118, 128, 165, 210, 228, 235 ] ],
>  [ [ 1, 19532, 43561, 70851, 78939, 89662, 118930, 131058, 148049, 150814,
>          157877 ],
>      [ 1, 33286, 39247, 58783, 107847, 120503, 137162, 154184, 174238,
>          188373, 241004 ] ], [  ], [  ], [  ], [  ],
>  [ [ 1, 2, 6, 7, 8, 10, 12, 14, 16, 17, 19 ],
>      [ 1, 5, 7, 8, 23, 26, 37, 43, 46, 49, 51 ], [ 1, 2, 3, 4, 5 ],
>      [ 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13 ],
>      [ 1, 4, 13, 21, 22, 35, 41, 42, 52, 62, 69 ],
>      [ 1, 9, 13, 17, 24, 28, 34, 38, 50, 54, 55 ], [ 1, 2, 3, 4, 5 ],
>      [ 1, 2, 3, 6, 7, 8, 9, 10, 11, 14, 15 ],
>      [ 1, 2, 4, 5, 6, 8, 9, 12, 13, 14, 15 ], [ 1, 2, 3, 4, 5 ] ], [  ],
>  [ [ 1, 2, 3, 4, 6, 8, 11, 12, 13, 14, 15 ],
>      [ 1, 2, 3, 5, 6, 8, 9, 10, 13, 14, 15 ],
>      [ 1, 2, 3, 4, 6, 7, 8, 11, 12, 14, 15 ] ], [  ], [  ], [  ], [  ],
>  [ [ 1, 2, 3, 4, 5, 6, 7, 8 ], [ 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12 ],
>      [ 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12 ],
>      [ 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12 ],
>      [ 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12 ],
>      [ 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12 ], [ 1, 2, 3, 4 ],
>      [ 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12 ],
>      [ 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12 ], [ 1, 2, 3, 4, 5, 6, 7, 8 ] ],
>  [ [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
>      [ 1, 2, 3, 4, 5, 10, 11, 12, 13, 17, 20 ],
>      [ 1, 16, 37, 43, 45, 50, 64, 67, 74, 85, 88 ],
>      [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ], [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
>        , [ 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 16 ],
>      [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ], [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ],
>      [ 1, 4, 5, 6, 7, 8, 11, 12, 13, 17, 20 ],
>      [ 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12 ] ] ];;
gap> for i in [1 .. Length(orders)] do
>   for j in [1 .. Length(orders[i])] do
>     for k in [1 .. Length(numbers[i][j])] do
>       G := SmallGroup(orders[i][j], numbers[i][j][k]);
>       H := Group(GeneratorsOfGroup(G), One(G));
>       if not IdSmallGroup(H) = [orders[i][j], numbers[i][j][k]] then
>         Print("fail!\n");
>       fi;
>     od;
>   od;
> od;

#
gap> STOP_TEST("id_group.tst");;
